# Combined Dockerfile for single Cloud Run deployment
# Builds backend + frontend and runs both in one container

# Stage 1: Build backend
FROM node:18-bullseye-slim AS backend-build
WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci --omit=dev
COPY backend/src ./src

# Stage 2: Build frontend
FROM node:18-alpine AS frontend-build
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
ARG VITE_API_URL=/api
ENV VITE_API_URL=$VITE_API_URL
RUN npm run build

# Stage 3: Runtime - Nginx + Node.js
FROM nginx:alpine

# Install Node.js and dependencies for backend
RUN apk add --no-cache nodejs npm curl libvips

# Copy backend
COPY --from=backend-build /app/backend /app/backend
WORKDIR /app/backend

# Copy frontend build to Nginx
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html

# Copy Nginx config
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Create uploads directory
RUN mkdir -p /app/uploads

# Create startup script to run both Node.js backend and Nginx
RUN printf '#!/bin/sh\n\
cd /app/backend\n\
node src/server.js &\n\
nginx -g "daemon off;"\n' > /start.sh && chmod +x /start.sh

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health || curl -f http://localhost:3000/health || exit 1

CMD ["/start.sh"]
